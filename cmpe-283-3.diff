diff --git a/arch/x86/kvm/cpuid.c b/arch/x86/kvm/cpuid.c
index 326da36..0131132 100644
--- a/arch/x86/kvm/cpuid.c
+++ b/arch/x86/kvm/cpuid.c
@@ -26,6 +26,9 @@
 
 u64 exit_counts = 0;
 u64 exit_delta = 0;
+u32 not_enabled_code_list[17] = {3,4,5,6,16,11,16,17,33,34,51,54,63,64,66,67,68};
+atomic64_t exit_counter[69]= {0};
+EXPORT_SYMBOL(exit_counter);
 EXPORT_SYMBOL(exit_counts);
 EXPORT_SYMBOL(exit_delta);
 
@@ -1137,6 +1140,7 @@ EXPORT_SYMBOL_GPL(kvm_cpuid);
 int kvm_emulate_cpuid(struct kvm_vcpu *vcpu)
 {
 	u32 eax, ebx, ecx, edx;
+	int i;
 
 	if (cpuid_fault_enabled(vcpu) && !kvm_require_cpl(vcpu, 0))
 		return 1;
@@ -1151,6 +1155,35 @@ int kvm_emulate_cpuid(struct kvm_vcpu *vcpu)
             eax = exit_counts;
             ecx = exit_delta & 0xffffffff;
             ebx = (exit_delta >> 32) & 0xffffffff;
+	} else if (eax == 0x4ffffffe) {
+	  uint32_t specific_count;
+	  if (ecx>=0 && ecx<=68 && ecx!=65 && ecx!=42 && ecx!=38 && ecx!=35) {
+	    // if ecx is not enabled in KVM retrun 0
+	    for(i = 0; i < 17; i++) {
+	      if (eax == not_enabled_code_list[i]) {
+		printk(KERN_INFO "exit reason number=%u not enabled in KVM", ecx);
+		eax=0;
+		ebx=0;
+		ecx=0;
+		edx=0;
+		break;
+	      }
+	    }
+	    if (i >= 17) {
+	      //if i >= 17 means eax is not in the list, then return  the exit count
+	      eax = atomic64_read(&exit_counter[ecx]);
+	      printk(KERN_INFO "exit reason number=%u, exit counter eax=%u", ecx, eax);
+	      specific_count = atomic64_read(&exit_counter[ecx]);
+	      printk(KERN_INFO "exit number %d exits= %d\n",ecx,specific_count);
+	    }
+	  }else{
+	    //else return 0 in all %eax, %ebx, %ecx registers and return 0xFFFFFFFF in %edx
+	    printk(KERN_INFO "exit reason number=%u not defined in SDM", ecx);
+	    eax=0;
+	    ebx=0;
+	    ecx=0;
+	    edx=0xFFFFFFFF;
+	  }
         } else {
 	    kvm_cpuid(vcpu, &eax, &ebx, &ecx, &edx, true);
             printk(KERN_INFO "EAX == 0x%x after kvm_cpuid()\n", eax);
diff --git a/arch/x86/kvm/vmx/vmx.c b/arch/x86/kvm/vmx/vmx.c
index cbc9abb..32b9f212 100644
--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@ -63,8 +63,13 @@
 #include "vmx.h"
 #include "x86.h"
 
+#include <asm/atomic.h>
+#include <asm/atomic64_64.h>
+#include <asm/msr.h>
+
 extern u64 exit_counts;
 extern u64 exit_delta;
+extern atomic64_t exit_counter[69];
 
 MODULE_AUTHOR("Qumranet");
 MODULE_LICENSE("GPL");
@@ -5954,6 +5959,9 @@ static int __vmx_handle_exit(struct kvm_vcpu *vcpu, fastpath_t exit_fastpath)
 	u16 exit_handler_index;
 
 	exit_counts++;
+	if (exit_reason.full < 69) {
+	  atomic64_inc(&exit_counter[exit_reason.full]);
+	}
 
 	/*
 	 * Flush logged GPAs PML buffer, this will make dirty_bitmap more
